---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: terraform-aws-ec2-client-vpn

# Logo for this project
#logo: docs/logo.png

# License of this project
license: "APACHE2"

# Copyrights
copyrights:
  - name: "Cloud Posse, LLC"
    url: "https://cloudposse.com"
    year: "2020"

# Canonical GitHub repo
github_repo: cloudposse/terraform-aws-ec2-client-vpn

# Badges to display
badges:
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/cloudposse/terraform-aws-ec2-client-vpn.svg"
    url: "https://github.com/cloudposse/terraform-aws-ec2-client-vpn/releases/latest"
  - name: "Slack Community"
    image: "https://slack.cloudposse.com/badge.svg"
    url: "https://slack.cloudposse.com"
  - name: "Discourse Forum"
    image: "https://img.shields.io/discourse/https/ask.sweetops.com/posts.svg"
    url: "https://ask.sweetops.com/"

# List any related terraform modules that this module may be used with or that this module depends on.
related:
  - name: "terraform-aws-components"
    description: "Repository collection of aws components."
    url: "https://github.com/cloudposse/terraform-aws-components"
  - name: "terraform-aws-ssm-tls-self-signed-cert"
    description: "This module creates a self-signed certificate and writes it alongside with its key to SSM Parameter Store (or alternatively AWS Secrets Manager). Used to store VPN certificates in ACM."
    url: "https://github.com/cloudposse/terraform-aws-ssm-tls-self-signed-cert"
  - name: "terraform-provider-awsutils"
    description: "Terraform provider for performing various tasks that cannot be performed with the official AWS Terraform Provider from Hashicorp. Used to export vpn client configuration."
    url: "https://github.com/cloudposse/terraform-provider-awsutils"

# List any resources helpful for someone to get started. For example, link to the hashicorp documentation or AWS documentation.
references:
  - name: OpenVPN Clients
    description: "Any OpenVPN client should be compatible with the AWS Client VPN."
    url: https://docs.aws.amazon.com/vpn/latest/clientvpn-user/connect-aws-client-vpn-connect.html

# Short description of this project
description: |-
  The `terraform-aws-ec2-client-vpn` project provides for ec2 client vpn infrastructure. AWS Client VPN is a managed client-based VPN service based on OpenVPN that enables you to securely access your AWS resources and resources in your on-premises network. With Client VPN, you can access your resources from any location using [any OpenVPN-based VPN client](https://docs.aws.amazon.com/vpn/latest/clientvpn-user/connect-aws-client-vpn-connect.html).

# Introduction to the project
#introduction: |-
#  This is an introduction.

# How to use this module. Should be an easy example to copy and paste.
usage: |-
  For a complete example, see [examples/complete](examples/complete).
  
  For automated tests of the complete example using [bats](https://github.com/bats-core/bats-core) and [Terratest](https://github.com/gruntwork-io/terratest)
  (which tests and deploys the example on AWS), see [test](test).

  ```hcl
  module "vpc_target" {
    source  = "cloudposse/vpc/aws"
    # Cloud Posse recommends pinning every module to a specific version
    # version = "x.x.x"

    cidr_block = "172.16.0.0/16"

    context = module.this.context
  }

  module "vpc_client" {
    source  = "cloudposse/vpc/aws"
    # Cloud Posse recommends pinning every module to a specific version
    # version = "x.x.x"

    cidr_block = "172.31.0.0/16"

    context = module.this.context
  }

  module "subnets" {
    source  = "cloudposse/dynamic-subnets/aws"
    # Cloud Posse recommends pinning every module to a specific version
    # version = "x.x.x"

    availability_zones   = var.availability_zones
    vpc_id               = module.vpc_target.vpc_id
    igw_id               = module.vpc_target.igw_id
    cidr_block           = module.vpc_target.vpc_cidr_block
    nat_gateway_enabled  = true
    nat_instance_enabled = false

    context = module.this.context
  }

  module "ec2_client_vpn" {
    source  = "cloudposse/ec2-client-vpn/aws"
    # Cloud Posse recommends pinning every module to a specific version
    # version = "x.x.x"

    client_cidr             = module.vpc_client.vpc_cidr_block
    organization_name       = var.organization_name
    logging_enabled         = var.logging_enabled
    retention_in_days       = var.retention_in_days
    associated_subnets      = module.subnets.private_subnet_ids
    authorization_rules     = var.authorization_rules

    additional_routes = [
      {
        destination_cidr_block = "0.0.0.0/0"
        description            = "Internet Route"
        target_vpc_subnet_id   = element(module.subnets.private_subnet_ids, 0)
      }
    ]
  }
  ```

# Example usage
examples: |-
  Here is an example of using this module:
  - [`examples/complete`](https://github.com/cloudposse/terraform-aws-ec2-client-vpn/examples/complete/) - complete example of using this module

# How to get started quickly
#quickstart: |-
#  Here's how to get started...

# Other files to include in this README from the project folder
include:
  - "docs/targets.md"
  - "docs/terraform.md"

# Contributors to this project
contributors:
  - name: "Erik Osterman"
    github: "osterman"
  - name: "Leo Przybylski"
    github: "r351574nc3"
  - name: "RB"
    github: "nitrocode"
